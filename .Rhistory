PA <- read.csv("./data/liuetal2019PA.csv")
envs1 <- extract(mystack, PA[,1:2])
envs <- envs1
envs[,2:5] <- apply(envs[,2:5], 2,function(w){ (w-mean(w,na.rm = T))/sd(w,na.rm = T)})
full <- cbind(PA,envs)
full <- na.omit(full)
Folds <- createFolds(1:nrow(full), k=5) # 5 fold CV
Y <- full$R
X <- list(full[,4], full[,5:6], full[,7], full[,8])
X <- lapply(X, as.matrix)
minlinres <- lapply(1:5,function(i, Y, X, Folds){
Y_train <- Y[-Folds[[i]]]
Y_test <- Y[Folds[[i]]]
X_train <- lapply(X, function(xx, fold){
as.matrix(xx[-fold,])
}, Folds[[i]])
X_test <- lapply(X, function(xx, fold){
as.matrix( xx[fold,])
}, Folds[[i]])
fit_minlin <- minlinlogistic(Y_train,X_train, boot = 0, method = "SANN")
predict_minlinr <- predict_minlin(fit_minlin$fit$opt$par,X_test)
roc_minlin <- roc(Y_test, predict_minlinr$predicted)
return(list(fit = fit_minlin, predict = predict_minlinr, roc = roc_minlin))
}, Y,X,Folds)
rfres <- lapply(1:5, function(i, full, Folds){
train_rf <- full[-Folds[[i]],]
test_rf <- full[Folds[[i]],]
fit_rf <- randomForest(R~., data = train_rf[,-c(1:2)])
predict_rf <- predict(fit_rf, newdata = test_rf)
roc_rf <- roc(test_rf$R, predict_rf)
return(list(fit = fit_rf, predict = predict_rf, roc = roc_rf))
}, full, Folds)
glmres <- lapply(1:5, function(i, full, Folds){
train_glm <- full[-Folds[[i]],]
test_glm <- full[Folds[[i]],]
fit_glm <- glm(R~., data = train_glm[,-c(1:2)],family = binomial())
predict_glm <- predict(fit_glm, newdata = test_glm)
roc_glm <- roc(test_glm$R, predict_glm)
return(list(fit = fit_glm, predict = predict_glm, roc = roc_glm))
}, full,Folds)
auc_minlin <- sapply(minlinres, function(w){
w$roc$auc
})
auc_rf <- sapply(rfres, function(w){
w$roc$auc
})
auc_glm <- sapply(glmres, function(w){
w$roc$auc
})
aucs <- data.frame(minlin = auc_minlin, rf = auc_rf, glm = auc_glm)
boxplot(aucs)
boxplot(log(aucs))
boxplot(aucs)
t.test(aucs)
t.test(aucs[,1], aucs[,2])
library(ggplot2)
library(reshape2)
aucs_plot <- melt(aucs)
View(aucs_plot)
ggplot(data = aucs_plot, mapping = aes(x = variable, y = value)) +
geom_violin() +
geom_point()
ggplot(data = aucs_plot, mapping = aes(x = variable, y = value)) +
geom_boxplot() +
geom_point()
summary(aucs)
plot(minlinres[[1]]$roc)
plot(minlinres[[2]]$roc)
plot(minlinres[[3]]$roc)
plot(minlinres[[4]]$roc)
plot(minlinres[[5]]$roc)
par(mfrow = c(1,3))
plot(minlinres[[1]]$roc)
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE)
}
plot(rfres[[1]]$roc)
for(i in 2:5){
plot(rfres[[i]]$roc, add = TRUE)
}
plot(glmres[[1]]$roc)
for(i in 2:5){
plot(glmres[[i]]$roc, add = TRUE)
}
plot(minlinres[[1]]$roc, title = "min-linear")
plot(minlinres[[1]]$roc, name = "min-linear")
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE)
}
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
par(mfrow = c(1,3))
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
plot(rfres[[1]]$roc, main = "random forest")
for(i in 2:5){
plot(rfres[[i]]$roc, add = TRUE, main = "random forest")
}
plot(glmres[[1]]$roc, main = "GLM")
for(i in 2:5){
plot(glmres[[i]]$roc, add = TRUE, main = "GLM")
}
par(mfrow = c(1,3))
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=1, y = -0.2, paste0("auc=",mean(aucs$minlin),"(",sd(aucs$minlin),")"))
text(x=1, y = -0.2, paste0("auc=", signif( mean(aucs$minlin),3),"(",signif( sd(aucs$minlin),3),")"))
par(mfrow = c(1,3))
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=1, y = -0.2, paste0("auc=",
signif( mean(aucs$minlin),3),
"(",signif( sd(aucs$minlin),3),")"))
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=0.7, y = -0.2, paste0("auc=",
signif( mean(aucs$minlin),3),
"(",signif( sd(aucs$minlin),3),")"))
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=0.2, y = 0.2, paste0("auc=",
signif( mean(aucs$minlin),3),
"(",signif( sd(aucs$minlin),3),")"))
par(mfrow = c(1,3))
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$minlin),3),
"(",signif( sd(aucs$minlin),3),")"))
par(mfrow = c(1,3))
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$minlin),3),
"(",signif( sd(aucs$minlin),3),")"))
plot(rfres[[1]]$roc, main = "random forest")
for(i in 2:5){
plot(rfres[[i]]$roc, add = TRUE, main = "random forest")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$rf),3),
"(",signif( sd(aucs$rf),3),")"))
plot(glmres[[1]]$roc, main = "GLM")
for(i in 2:5){
plot(glmres[[i]]$roc, add = TRUE, main = "GLM")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$glm),3),
"(",signif( sd(aucs$glm),3),")"))
pdf("./Res/AUC.pdf", width = 12,height=4.5)
par(mfrow = c(1,3))
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$minlin),3),
"(",signif( sd(aucs$minlin),3),")"))
plot(rfres[[1]]$roc, main = "random forest")
for(i in 2:5){
plot(rfres[[i]]$roc, add = TRUE, main = "random forest")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$rf),3),
"(",signif( sd(aucs$rf),3),")"))
plot(glmres[[1]]$roc, main = "GLM")
for(i in 2:5){
plot(glmres[[i]]$roc, add = TRUE, main = "GLM")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$glm),3),
"(",signif( sd(aucs$glm),3),")"))
dev.off()
pdf("./Res/AUC.pdf", width = 12,height=4, scale = 1.3)
?pdf
pdf("./Res/AUC.pdf", width = 6,height=2)
par(mfrow = c(1,3))
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$minlin),3),
"(",signif( sd(aucs$minlin),3),")"))
plot(rfres[[1]]$roc, main = "random forest")
for(i in 2:5){
plot(rfres[[i]]$roc, add = TRUE, main = "random forest")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$rf),3),
"(",signif( sd(aucs$rf),3),")"))
plot(glmres[[1]]$roc, main = "GLM")
for(i in 2:5){
plot(glmres[[i]]$roc, add = TRUE, main = "GLM")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$glm),3),
"(",signif( sd(aucs$glm),3),")"))
dev.off()
pdf("./Res/AUC.pdf", width = 9,height=3)
par(mfrow = c(1,3))
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$minlin),3),
"(",signif( sd(aucs$minlin),3),")"))
plot(rfres[[1]]$roc, main = "random forest")
for(i in 2:5){
plot(rfres[[i]]$roc, add = TRUE, main = "random forest")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$rf),3),
"(",signif( sd(aucs$rf),3),")"))
plot(glmres[[1]]$roc, main = "GLM")
for(i in 2:5){
plot(glmres[[i]]$roc, add = TRUE, main = "GLM")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$glm),3),
"(",signif( sd(aucs$glm),3),")"))
dev.off()
## load points
PA <- read.csv("./data/liuetal2019PA.csv")
envs1 <- extract(mystack, PA[,1:2])
envs <- envs1
envs[,2:5] <- apply(envs[,2:5], 2,function(w){ (w-mean(w,na.rm = T))/sd(w,na.rm = T)})
full <- cbind(PA,envs)
full <- na.omit(full)
Y <- full$R
X <- list(full[,4], full[,5:6], full[,7], full[,8])
X <- lapply(X, as.matrix)
# make predictions used
all_env <- as.matrix( getValues(mystack))
mean_env <- colMeans(envs1[,2:5], na.rm = T)
sd_env <- apply(envs1[,2:5],2,sd, na.rm = T)
allones <- rep(1,nrow(all_env))
# standardize
all_env[,2:5] <- (all_env[,2:5]-(allones %*% t(mean_env)))/(allones %*% t(sd_env))
Xpred <- list(all_env[,1], all_env[,2:3], all_env[,4], all_env[,5])
Xpred <- lapply(Xpred, as.matrix)
# try minlinear
source("./R/minlinlogistic.R")
fit <- minlinlogistic(Y,X, boot = 50, method = "SANN")
fit <- minlinlogistic(Y,X, boot = 0, method = "SANN")
fit$fit$findmin
plot(roc(Y, fit$fit$predicted))
roc(Y, fit$fit$predicted)
dev.off()
# make predictions, min-linear
predicted_sichuan <- predict_minlin(fit$fit$opt$par, Xpred)
# which is the limiting factor
values(occup) <- predicted_sichuan$limiting
occup <- template
# which is the limiting factor
values(occup) <- predicted_sichuan$limiting
plot(occup)
fit <- minlinlogistic(Y,X, boot = 0, method = "SANN")
# make predictions, min-linear
predicted_sichuan <- predict_minlin(fit$fit$opt$par, Xpred)
# which is the limiting factor
values(occup) <- predicted_sichuan$limiting
plot(occup)
set.seed(42)
fit <- minlinlogistic(Y,X, boot = 0, method = "SANN")
# make predictions, min-linear
predicted_sichuan <- predict_minlin(fit$fit$opt$par, Xpred)
# which is the limiting factor
values(occup) <- predicted_sichuan$limiting
plot(occup)
set.seed(12345)
fit <- minlinlogistic(Y,X, boot = 0, method = "SANN")
# make predictions, min-linear
predicted_sichuan <- predict_minlin(fit$fit$opt$par, Xpred)
par(mfrow = c(1,2))
dev.off()
# which is the limiting factor
values(occup) <- predicted_sichuan$limiting
plot(occup)
set.seed(42)
fit <- minlinlogistic(Y,X, boot = 0, method = "SANN")
fitts <- lapply(1:10, function(i, Y,X){
minlinlogistic(Y,X, boot = 0, method = "SANN")
}, Y,X)
set.seed(42)
fit <- minlinlogistic(Y,X, boot = 0, method = "SANN")
fitts <- lapply(1:10, function(i, Y,X){
minlinlogistic(Y,X, boot = 0, method = "SANN")
}, Y,X)
parss <- lapply(fitts, function(w){w$fit$opt$par})
# make predictions, min-linear
#predicted_sichuan <- predict_minlin(fit$fit$opt$par, Xpred)
predicted_sichuan <- predict_minlin(Reduce(mean,parss), Xpred)
Reduce(mean,parss)
parss
# make predictions, min-linear
#predicted_sichuan <- predict_minlin(fit$fit$opt$par, Xpred)
predicted_sichuan <- predict_minlin(colMeans( Reduce(rbind,parss)), Xpred)
par(mfrow = c(1,2))
occup <- template
values(occup) <- predicted_sichuan$predicted
plot(occup)
# which is the limiting factor
values(occup) <- predicted_sichuan$limiting
plot(occup)
points(PA$XX[PA$R==1],PA$YY[PA$R==1], col = "red")
points(PA$XX[PA$R==0],PA$YY[PA$R==0], col = "blue")
occup <- template
values(occup) <- predicted_sichuan$predicted
plot(occup)
# random forest
library(randomForest)
rffit <- randomForest(R~., data = full[,-c(1:2)])
# prediction of random forest
predicted_rf <- predict(rffit, newdata = all_env)
occuprf <- template
values(occuprf) <- predicted_rf
plot(occuprf)
# glm predicting
predicted_glm <- predict(glmfit, newdata = as.data.frame(all_env), type = "response")
occupglm <- template
values(occupglm) <- predicted_glm
plot(occupglm)
glmfit <- glm(R~., data = full[,-c(1:2)], family = binomial())
minlinres <- lapply(1:5,function(i, Y, X, Folds){
Y_train <- Y[-Folds[[i]]]
Y_test <- Y[Folds[[i]]]
X_train <- lapply(X, function(xx, fold){
as.matrix(xx[-fold,])
}, Folds[[i]])
X_test <- lapply(X, function(xx, fold){
as.matrix( xx[fold,])
}, Folds[[i]])
#fit_minlin <- minlinlogistic(Y_train,X_train, boot = 0, method = "SANN")
fitts <- lapply(1:10, function(i, Y,X){
minlinlogistic(Y,X, boot = 0, method = "SANN")
}, Y,X)
parss <- lapply(fitts, function(w){w$fit$opt$par})
predict_minlinr <- predict_minlin(parss,X_test)
roc_minlin <- roc(Y_test, predict_minlinr$predicted)
return(list(fit = fitts, predict = predict_minlinr, roc = roc_minlin))
}, Y,X,Folds)
colMeans( Reduce(rbind,parss))
parss[[1]]
parss[[2]]
parss[[3]]
parss[[4]]
parss[[4]]
parss[[5]]
parss[[6]]
minlinres <- lapply(1:5,function(i, Y, X, Folds){
Y_train <- Y[-Folds[[i]]]
Y_test <- Y[Folds[[i]]]
X_train <- lapply(X, function(xx, fold){
as.matrix(xx[-fold,])
}, Folds[[i]])
X_test <- lapply(X, function(xx, fold){
as.matrix( xx[fold,])
}, Folds[[i]])
#fit_minlin <- minlinlogistic(Y_train,X_train, boot = 0, method = "SANN")
fitts <- lapply(1:10, function(i, Y,X){
minlinlogistic(Y,X, boot = 0, method = "SANN")
}, Y,X)
parss <- lapply(fitts, function(w){w$fit$opt$par})
predict_minlinr <- predict_minlin(colMeans( Reduce(rbind,parss)),X_test)
roc_minlin <- roc(Y_test, predict_minlinr$predicted)
return(list(fit = fitts, predict = predict_minlinr, roc = roc_minlin))
}, Y,X,Folds)
auc_minlin <- sapply(minlinres, function(w){
w$roc$auc
})
aucs <- data.frame(minlin = auc_minlin, rf = auc_rf, glm = auc_glm)
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$minlin),3),
"(",signif( sd(aucs$minlin),3),")"))
aucs <- data.frame(minlin = auc_minlin, rf = auc_rf, glm = auc_glm)
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$minlin),3),
"(",signif( sd(aucs$minlin),3),")"))
aucs <- data.frame(minlin = auc_minlin, rf = auc_rf, glm = auc_glm)
library(ggplot2)
library(reshape2)
aucs_plot <- melt(aucs)
ggplot(data = aucs_plot, mapping = aes(x = variable, y = value)) +
geom_boxplot() +
geom_point()
library(sp)
library(raster)
library(caret)
library(pROC)
library(randomForest)
set.seed(42)
rasters15 <- list.files("./data/Raster", full.names = T)
rasters15 <- lapply(rasters15, raster)
mystack <- stack(rasters15)
template <- rasters15[[1]]
source("./R/minlinlogistic.R")
## load points
PA <- read.csv("./data/liuetal2019PA.csv")
envs1 <- extract(mystack, PA[,1:2])
envs <- envs1
envs[,2:5] <- apply(envs[,2:5], 2,function(w){ (w-mean(w,na.rm = T))/sd(w,na.rm = T)})
full <- cbind(PA,envs)
full <- na.omit(full)
Folds <- createFolds(1:nrow(full), k=5) # 5 fold CV
Y <- full$R
X <- list(full[,4], full[,5:6], full[,7], full[,8])
X <- lapply(X, as.matrix)
minlinres <- lapply(1:5,function(i, Y, X, Folds){
Y_train <- Y[-Folds[[i]]]
Y_test <- Y[Folds[[i]]]
X_train <- lapply(X, function(xx, fold){
as.matrix(xx[-fold,])
}, Folds[[i]])
X_test <- lapply(X, function(xx, fold){
as.matrix( xx[fold,])
}, Folds[[i]])
#fit_minlin <- minlinlogistic(Y_train,X_train, boot = 0, method = "SANN")
fitts <- lapply(1:10, function(i, Y,X){
minlinlogistic(Y,X, boot = 0, method = "SANN")
}, Y,X)
parss <- lapply(fitts, function(w){w$fit$opt$par})
predict_minlinr <- predict_minlin(colMeans( Reduce(rbind,parss)),X_test)
roc_minlin <- roc(Y_test, predict_minlinr$predicted)
return(list(fit = fitts, predict = predict_minlinr, roc = roc_minlin))
}, Y,X,Folds)
rfres <- lapply(1:5, function(i, full, Folds){
train_rf <- full[-Folds[[i]],]
test_rf <- full[Folds[[i]],]
fit_rf <- randomForest(R~., data = train_rf[,-c(1:2)])
predict_rf <- predict(fit_rf, newdata = test_rf)
roc_rf <- roc(test_rf$R, predict_rf)
return(list(fit = fit_rf, predict = predict_rf, roc = roc_rf))
}, full, Folds)
glmres <- lapply(1:5, function(i, full, Folds){
train_glm <- full[-Folds[[i]],]
test_glm <- full[Folds[[i]],]
fit_glm <- glm(R~., data = train_glm[,-c(1:2)],family = binomial())
predict_glm <- predict(fit_glm, newdata = test_glm)
roc_glm <- roc(test_glm$R, predict_glm)
return(list(fit = fit_glm, predict = predict_glm, roc = roc_glm))
}, full,Folds)
auc_minlin <- sapply(minlinres, function(w){
w$roc$auc
})
auc_rf <- sapply(rfres, function(w){
w$roc$auc
})
auc_glm <- sapply(glmres, function(w){
w$roc$auc
})
aucs <- data.frame(minlin = auc_minlin, rf = auc_rf, glm = auc_glm)
library(ggplot2)
library(reshape2)
aucs_plot <- melt(aucs)
ggplot(data = aucs_plot, mapping = aes(x = variable, y = value)) +
geom_boxplot() +
geom_point()
pdf("./Res/AUC.pdf", width = 9,height=3)
par(mfrow = c(1,3))
plot(minlinres[[1]]$roc, main = "min-linear")
for(i in 2:5){
plot(minlinres[[i]]$roc, add = TRUE, main = "min-linear")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$minlin),3),
"(",signif( sd(aucs$minlin),3),")"))
plot(rfres[[1]]$roc, main = "random forest")
for(i in 2:5){
plot(rfres[[i]]$roc, add = TRUE, main = "random forest")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$rf),3),
"(",signif( sd(aucs$rf),3),")"))
plot(glmres[[1]]$roc, main = "GLM")
for(i in 2:5){
plot(glmres[[i]]$roc, add = TRUE, main = "GLM")
}
text(x=0.2, y = 0.1, paste0("auc=",
signif( mean(aucs$glm),3),
"(",signif( sd(aucs$glm),3),")"))
dev.off()
